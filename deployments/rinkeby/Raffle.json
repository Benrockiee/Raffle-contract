{
  "address": "0x069f0557Ce6ed034f0144fe41aC2b7A03EE5c027",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughEthEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "winnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfab530af23b5edc3aaddf8795ce898a79dd91b0c0e391774adb359788d748e0f",
  "receipt": {
    "to": null,
    "from": "0xc85e03b9171986cD0e1680d7980725Eb167dbdBb",
    "contractAddress": "0x069f0557Ce6ed034f0144fe41aC2b7A03EE5c027",
    "transactionIndex": 9,
    "gasUsed": "1155506",
    "logsBloom": "0x
    "blockHash": "0xf98306d937bc5ab7b52a12d3ac0d11f548e53e2172d3256a5263964f0f729647",
    "transactionHash": "0xfab530af23b5edc3aaddf8795ce898a79dd91b0c0e391774adb359788d748e0f",
    "logs": [],
    "blockNumber": 11185714,
    "cumulativeGasUsed": "16478802",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "10380",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "30",
    "10000000000000000",
    "5000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "0aa8007ceee92091236c2a952591aad2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughEthEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"winnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/raffle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\nerror Raffle__NotEnoughEthEntered();\\nerror Raffle__TransferFailed();\\nerror Raffle__NotOpen();\\nerror Raffle__UpkeepNotNeeded(\\n    uint256 currentBalance,\\n    uint256 numPlayers,\\n    uint256 raffleState\\n);\\n\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    enum RaffleState {\\n        OPEN, //0\\n        CALCULATING //1\\n    }\\n\\n    //State Variables\\n    //chainlink VRF variables\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gaslane;\\n    uint64 private immutable i_subscriptionId;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    //Lottery Variables\\n    address private s_recentWinner;\\n    RaffleState private s_raffleState;\\n    uint256 private s_lastTimeStamp;\\n    uint256 private i_interval;\\n    address payable[] private s_players;\\n    uint256 private immutable i_entranceFee;\\n\\n    //Events\\n    event RaffleEnter(address indexed player);\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\n    event winnerPicked(address indexed player);\\n\\n    constructor(\\n        address vrfCoordinatorV2, //this is the only contract we have in constructor\\n        uint64 subscriptionId,\\n        bytes32 gasLane, // keyHash\\n        uint256 interval,\\n        uint256 entranceFee,\\n        uint32 callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gaslane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_raffleState = RaffleState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        i_interval = interval;\\n    }\\n\\n    function enterRaffle() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert Raffle__NotEnoughEthEntered();\\n        }\\n        s_players.push(payable(msg.sender));\\n        emit RaffleEnter(msg.sender);\\n        if (s_raffleState != RaffleState.OPEN) {\\n            revert Raffle__NotOpen();\\n        }\\n    }\\n\\n    function checkUpkeep(\\n        bytes memory /*checkData*/\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory /*performData*/\\n        )\\n    {\\n        //this means if its open, it will be true if rafflestate is in an\\n        //open state\\n        bool isOpen = RaffleState.OPEN == s_raffleState;\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n        bool hasPlayers = (s_players.length > 0);\\n        bool hasBalance = address(this).balance > 0;\\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\n    }\\n\\n    function performUpkeep(\\n        bytes calldata /*performData*/\\n    ) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Raffle__UpkeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_raffleState)\\n            );\\n        }\\n        //we request a random winner\\n        //once we get it, we do something with it\\n        s_raffleState = RaffleState.CALCULATING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gaslane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RequestedRaffleWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256,\\n        /*request id*/\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        s_raffleState = RaffleState.OPEN;\\n        s_players = new address payable[](0);\\n        s_lastTimeStamp = block.timestamp;\\n        //This means we'll reset the raffle state and reset our players array\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayers(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getLatestTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n}\\n\",\"keccak256\":\"0x3784d16cf82681140796ba388803162ff2ea93ac333091a4618d07a683a25b51\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b50604051620016bb380380620016bb8339818101604052810190620000389190620001aa565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508161012081815250508573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360c081815250508467ffffffffffffffff1660e08167ffffffffffffffff1660c01b815250508063ffffffff166101008163ffffffff1660e01b8152505060008060146101000a81548160ff02191690836001811115620001185762000117620002b2565b5b0217905550426001819055508260028190555050505050505062000368565b6000815190506200014881620002e6565b92915050565b6000815190506200015f8162000300565b92915050565b60008151905062000176816200031a565b92915050565b6000815190506200018d8162000334565b92915050565b600081519050620001a4816200034e565b92915050565b60008060008060008060c08789031215620001ca57620001c9620002e1565b5b6000620001da89828a0162000137565b9650506020620001ed89828a0162000193565b95505060406200020089828a016200014e565b94505060606200021389828a0162000165565b93505060806200022689828a0162000165565b92505060a06200023989828a016200017c565b9150509295509295509295565b6000620002538262000264565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b620002f18162000246565b8114620002fd57600080fd5b50565b6200030b816200025a565b81146200031757600080fd5b50565b620003258162000284565b81146200033157600080fd5b50565b6200033f816200028e565b81146200034b57600080fd5b50565b62000359816200029e565b81146200036557600080fd5b50565b60805160601c60a05160601c60c05160e05160c01c6101005160e01c610120516112e9620003d2600039600081816102fa01526103f6015260006106a5015260006106820152600061066101526000610625015260008181610336015261038a01526112e96000f3fe6080604052600436106100c25760003560e01c8063460e20491161007f5780635f1b0fd8116100595780635f1b0fd8146102375780636e04ff0d1461026257806391ad27b4146102a0578063fd6673f5146102cb576100c2565b8063460e2049146101a4578063473f1ddc146101e157806353a2c19a1461020c576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc53914610146578063320229eb146101505780634585e33b1461017b575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610efd565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190610ee2565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610d0e565b610334565b005b61014e6103f4565b005b34801561015c57600080fd5b50610165610563565b6040516101729190610efd565b60405180910390f35b34801561018757600080fd5b506101a2600480360381019061019d9190610c1e565b61056d565b005b3480156101b057600080fd5b506101cb60048036038101906101c69190610cb4565b61076d565b6040516101d89190610e1b565b60405180910390f35b3480156101ed57600080fd5b506101f66107b5565b6040516102039190610e1b565b60405180910390f35b34801561021857600080fd5b506102216107de565b60405161022e9190610efd565b60405180910390f35b34801561024357600080fd5b5061024c6107ed565b6040516102599190610efd565b60405180910390f35b34801561026e57600080fd5b5061028960048036038101906102849190610c6b565b6107fa565b604051610297929190610e5f565b60405180910390f35b3480156102ac57600080fd5b506102b5610888565b6040516102c29190610efd565b60405180910390f35b3480156102d757600080fd5b506102e0610892565b6040516102ed9190610efd565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e657337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103dd929190610e36565b60405180910390fd5b6103f0828261089f565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561044e576040517f066d781f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a260006001811115610508576105076111cc565b5b600060149054906101000a900460ff16600181111561052a576105296111cc565b5b14610561576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000600154905090565b6000610587604051806020016040528060008152506107fa565b509050806105f65747600380549050600060149054906101000a900460ff1660018111156105b8576105b76111cc565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016105ed93929190610f18565b60405180910390fd5b6001600060146101000a81548160ff0219169083600181111561061c5761061b6111cc565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106e6959493929190610e8f565b602060405180830381600087803b15801561070057600080fd5b505af1158015610714573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107389190610ce1565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b600060038281548110610783576107826111fb565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b6000606060008060149054906101000a900460ff166001811115610821576108206111cc565b5b60006001811115610835576108346111cc565b5b14905060006002546001544261084b9190610fed565b1190506000806003805490501190506000804711905083801561086b5750825b80156108745750815b801561087d5750805b955050505050915091565b6000600254905090565b6000600380549050905090565b6000600380549050826000815181106108bb576108ba6111fb565b5b60200260200101516108cd919061113d565b90506000600382815481106108e5576108e46111fb565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060146101000a81548160ff02191690836001811115610977576109766111cc565b5b0217905550600067ffffffffffffffff8111156109975761099661122a565b5b6040519080825280602002602001820160405280156109c55781602001602082028036833780820191505090505b50600390805190602001906109db9291906109e9565b504260018190555050505050565b828054828255906000526020600020908101928215610a62579160200282015b82811115610a615782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a09565b5b509050610a6f9190610a73565b5090565b5b80821115610a8c576000816000905550600101610a74565b5090565b6000610aa3610a9e84610f74565b610f4f565b90508083825260208201905082856020860282011115610ac657610ac5611263565b5b60005b85811015610af65781610adc8882610bf4565b845260208401935060208301925050600181019050610ac9565b5050509392505050565b6000610b13610b0e84610fa0565b610f4f565b905082815260208101848484011115610b2f57610b2e611268565b5b610b3a8482856110ca565b509392505050565b600082601f830112610b5757610b5661125e565b5b8135610b67848260208601610a90565b91505092915050565b60008083601f840112610b8657610b8561125e565b5b8235905067ffffffffffffffff811115610ba357610ba2611259565b5b602083019150836001820283011115610bbf57610bbe611263565b5b9250929050565b600082601f830112610bdb57610bda61125e565b5b8135610beb848260208601610b00565b91505092915050565b600081359050610c038161129c565b92915050565b600081519050610c188161129c565b92915050565b60008060208385031215610c3557610c34611272565b5b600083013567ffffffffffffffff811115610c5357610c5261126d565b5b610c5f85828601610b70565b92509250509250929050565b600060208284031215610c8157610c80611272565b5b600082013567ffffffffffffffff811115610c9f57610c9e61126d565b5b610cab84828501610bc6565b91505092915050565b600060208284031215610cca57610cc9611272565b5b6000610cd884828501610bf4565b91505092915050565b600060208284031215610cf757610cf6611272565b5b6000610d0584828501610c09565b91505092915050565b60008060408385031215610d2557610d24611272565b5b6000610d3385828601610bf4565b925050602083013567ffffffffffffffff811115610d5457610d5361126d565b5b610d6085828601610b42565b9150509250929050565b610d7381611021565b82525050565b610d8281611033565b82525050565b610d918161103f565b82525050565b6000610da282610fd1565b610dac8185610fdc565b9350610dbc8185602086016110d9565b610dc581611277565b840191505092915050565b610dd9816110b8565b82525050565b610de88161105c565b82525050565b610df78161108a565b82525050565b610e0681611094565b82525050565b610e15816110a4565b82525050565b6000602082019050610e306000830184610d6a565b92915050565b6000604082019050610e4b6000830185610d6a565b610e586020830184610d6a565b9392505050565b6000604082019050610e746000830185610d79565b8181036020830152610e868184610d97565b90509392505050565b600060a082019050610ea46000830188610d88565b610eb16020830187610e0c565b610ebe6040830186610ddf565b610ecb6060830185610dfd565b610ed86080830184610dfd565b9695505050505050565b6000602082019050610ef76000830184610dd0565b92915050565b6000602082019050610f126000830184610dee565b92915050565b6000606082019050610f2d6000830186610dee565b610f3a6020830185610dee565b610f476040830184610dee565b949350505050565b6000610f59610f6a565b9050610f65828261110c565b919050565b6000604051905090565b600067ffffffffffffffff821115610f8f57610f8e61122a565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610fbb57610fba61122a565b5b610fc482611277565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000610ff88261108a565b91506110038361108a565b9250828210156110165761101561116e565b5b828203905092915050565b600061102c8261106a565b9050919050565b60008115159050919050565b6000819050919050565b600081905061105782611288565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006110c382611049565b9050919050565b82818337600083830152505050565b60005b838110156110f75780820151818401526020810190506110dc565b83811115611106576000848401525b50505050565b61111582611277565b810181811067ffffffffffffffff821117156111345761113361122a565b5b80604052505050565b60006111488261108a565b91506111538361108a565b9250826111635761116261119d565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60028110611299576112986111cc565b5b50565b6112a58161108a565b81146112b057600080fd5b5056fea2646970667358221220ceb46dd1587eec66a25604c758e8e082cb16e0aa09566e926493c941ef1b977064736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c8063460e20491161007f5780635f1b0fd8116100595780635f1b0fd8146102375780636e04ff0d1461026257806391ad27b4146102a0578063fd6673f5146102cb576100c2565b8063460e2049146101a4578063473f1ddc146101e157806353a2c19a1461020c576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc53914610146578063320229eb146101505780634585e33b1461017b575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610efd565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190610ee2565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610d0e565b610334565b005b61014e6103f4565b005b34801561015c57600080fd5b50610165610563565b6040516101729190610efd565b60405180910390f35b34801561018757600080fd5b506101a2600480360381019061019d9190610c1e565b61056d565b005b3480156101b057600080fd5b506101cb60048036038101906101c69190610cb4565b61076d565b6040516101d89190610e1b565b60405180910390f35b3480156101ed57600080fd5b506101f66107b5565b6040516102039190610e1b565b60405180910390f35b34801561021857600080fd5b506102216107de565b60405161022e9190610efd565b60405180910390f35b34801561024357600080fd5b5061024c6107ed565b6040516102599190610efd565b60405180910390f35b34801561026e57600080fd5b5061028960048036038101906102849190610c6b565b6107fa565b604051610297929190610e5f565b60405180910390f35b3480156102ac57600080fd5b506102b5610888565b6040516102c29190610efd565b60405180910390f35b3480156102d757600080fd5b506102e0610892565b6040516102ed9190610efd565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e657337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103dd929190610e36565b60405180910390fd5b6103f0828261089f565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561044e576040517f066d781f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a260006001811115610508576105076111cc565b5b600060149054906101000a900460ff16600181111561052a576105296111cc565b5b14610561576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000600154905090565b6000610587604051806020016040528060008152506107fa565b509050806105f65747600380549050600060149054906101000a900460ff1660018111156105b8576105b76111cc565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016105ed93929190610f18565b60405180910390fd5b6001600060146101000a81548160ff0219169083600181111561061c5761061b6111cc565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106e6959493929190610e8f565b602060405180830381600087803b15801561070057600080fd5b505af1158015610714573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107389190610ce1565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b600060038281548110610783576107826111fb565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b6000606060008060149054906101000a900460ff166001811115610821576108206111cc565b5b60006001811115610835576108346111cc565b5b14905060006002546001544261084b9190610fed565b1190506000806003805490501190506000804711905083801561086b5750825b80156108745750815b801561087d5750805b955050505050915091565b6000600254905090565b6000600380549050905090565b6000600380549050826000815181106108bb576108ba6111fb565b5b60200260200101516108cd919061113d565b90506000600382815481106108e5576108e46111fb565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060146101000a81548160ff02191690836001811115610977576109766111cc565b5b0217905550600067ffffffffffffffff8111156109975761099661122a565b5b6040519080825280602002602001820160405280156109c55781602001602082028036833780820191505090505b50600390805190602001906109db9291906109e9565b504260018190555050505050565b828054828255906000526020600020908101928215610a62579160200282015b82811115610a615782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a09565b5b509050610a6f9190610a73565b5090565b5b80821115610a8c576000816000905550600101610a74565b5090565b6000610aa3610a9e84610f74565b610f4f565b90508083825260208201905082856020860282011115610ac657610ac5611263565b5b60005b85811015610af65781610adc8882610bf4565b845260208401935060208301925050600181019050610ac9565b5050509392505050565b6000610b13610b0e84610fa0565b610f4f565b905082815260208101848484011115610b2f57610b2e611268565b5b610b3a8482856110ca565b509392505050565b600082601f830112610b5757610b5661125e565b5b8135610b67848260208601610a90565b91505092915050565b60008083601f840112610b8657610b8561125e565b5b8235905067ffffffffffffffff811115610ba357610ba2611259565b5b602083019150836001820283011115610bbf57610bbe611263565b5b9250929050565b600082601f830112610bdb57610bda61125e565b5b8135610beb848260208601610b00565b91505092915050565b600081359050610c038161129c565b92915050565b600081519050610c188161129c565b92915050565b60008060208385031215610c3557610c34611272565b5b600083013567ffffffffffffffff811115610c5357610c5261126d565b5b610c5f85828601610b70565b92509250509250929050565b600060208284031215610c8157610c80611272565b5b600082013567ffffffffffffffff811115610c9f57610c9e61126d565b5b610cab84828501610bc6565b91505092915050565b600060208284031215610cca57610cc9611272565b5b6000610cd884828501610bf4565b91505092915050565b600060208284031215610cf757610cf6611272565b5b6000610d0584828501610c09565b91505092915050565b60008060408385031215610d2557610d24611272565b5b6000610d3385828601610bf4565b925050602083013567ffffffffffffffff811115610d5457610d5361126d565b5b610d6085828601610b42565b9150509250929050565b610d7381611021565b82525050565b610d8281611033565b82525050565b610d918161103f565b82525050565b6000610da282610fd1565b610dac8185610fdc565b9350610dbc8185602086016110d9565b610dc581611277565b840191505092915050565b610dd9816110b8565b82525050565b610de88161105c565b82525050565b610df78161108a565b82525050565b610e0681611094565b82525050565b610e15816110a4565b82525050565b6000602082019050610e306000830184610d6a565b92915050565b6000604082019050610e4b6000830185610d6a565b610e586020830184610d6a565b9392505050565b6000604082019050610e746000830185610d79565b8181036020830152610e868184610d97565b90509392505050565b600060a082019050610ea46000830188610d88565b610eb16020830187610e0c565b610ebe6040830186610ddf565b610ecb6060830185610dfd565b610ed86080830184610dfd565b9695505050505050565b6000602082019050610ef76000830184610dd0565b92915050565b6000602082019050610f126000830184610dee565b92915050565b6000606082019050610f2d6000830186610dee565b610f3a6020830185610dee565b610f476040830184610dee565b949350505050565b6000610f59610f6a565b9050610f65828261110c565b919050565b6000604051905090565b600067ffffffffffffffff821115610f8f57610f8e61122a565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610fbb57610fba61122a565b5b610fc482611277565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000610ff88261108a565b91506110038361108a565b9250828210156110165761101561116e565b5b828203905092915050565b600061102c8261106a565b9050919050565b60008115159050919050565b6000819050919050565b600081905061105782611288565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006110c382611049565b9050919050565b82818337600083830152505050565b60005b838110156110f75780820151818401526020810190506110dc565b83811115611106576000848401525b50505050565b61111582611277565b810181811067ffffffffffffffff821117156111345761113361122a565b5b80604052505050565b60006111488261108a565b91506111538361108a565b9250826111635761116261119d565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60028110611299576112986111cc565b5b50565b6112a58161108a565b81146112b057600080fd5b5056fea2646970667358221220ceb46dd1587eec66a25604c758e8e082cb16e0aa09566e926493c941ef1b977064736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 882,
        "contract": "contracts/raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 885,
        "contract": "contracts/raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "0",
        "type": "t_enum(RaffleState)865"
      },
      {
        "astId": 887,
        "contract": "contracts/raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 889,
        "contract": "contracts/raffle.sol:Raffle",
        "label": "i_interval",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 892,
        "contract": "contracts/raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address_payable)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)865": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}